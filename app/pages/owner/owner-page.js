"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var frameModule = require("ui/frame");
var owner_view_model_1 = require("./owner-view-model");
function navigatingTo(args) {
    var page = args.object;
    page.bindingContext = new owner_view_model_1.OwnerViewModel();
}
exports.navigatingTo = navigatingTo;
function backTap(args) {
    var button = args.object;
    var page = button.page;
    frameModule.topmost().navigate({
        moduleName: "pages/main/main-page",
        transition: { name: "flip" },
        context: {
            ownerName: page.bindingContext.ownerName,
        },
    });
}
exports.backTap = backTap;
function firstTfLoaded(args) {
    var firstTextfield = args.object;
    setTimeout(function () {
        firstTextfield.focus(); // Shows the soft input method, ususally a soft keyboard.
    }, 100);
}
exports.firstTfLoaded = firstTfLoaded;
function onReturnPress(args) {
    var textField = args.object;
    var model = textField.bindingContext;
    model.set("ownerName", textField.text);
    setTimeout(function () {
        textField.dismissSoftInput(); // Hides the soft input method, ususally a soft keyboard.
    }, 100);
}
exports.onReturnPress = onReturnPress;
function onFocus(args) {
    // focus event will be triggered when the users enters the TextField
    console.log("onFocus event");
}
exports.onFocus = onFocus;
function onBlur(args) {
    // blur event will be triggered when the user leaves the TextField
    var textField = args.object;
    textField.dismissSoftInput();
    console.log("onBlur event");
}
exports.onBlur = onBlur;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3duZXItcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm93bmVyLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBd0M7QUFHeEMsdURBQW9EO0FBR3BELHNCQUE2QixJQUFtQjtJQUM1QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBYyxDQUFDO0lBQ2pDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxpQ0FBYyxFQUFFLENBQUM7QUFDL0MsQ0FBQztBQUhELG9DQUdDO0FBRUQsaUJBQXdCLElBQW1CO0lBQ3ZDLElBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFjLENBQUM7SUFDbkMsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQVksQ0FBQztJQUVqQyxXQUFXLENBQUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDO1FBQzNCLFVBQVUsRUFBRSxzQkFBc0I7UUFDbEMsVUFBVSxFQUFFLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRTtRQUM1QixPQUFPLEVBQUU7WUFDTCxTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsQ0FBQyxTQUFTO1NBQzNDO0tBQ0osQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQVhELDBCQVdDO0FBR0QsdUJBQThCLElBQWU7SUFDekMsSUFBTSxjQUFjLEdBQUcsSUFBSSxDQUFDLE1BQW1CLENBQUM7SUFDaEQsVUFBVSxDQUFDO1FBQ1AsY0FBYyxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUMseURBQXlEO0lBQ3JGLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNaLENBQUM7QUFMRCxzQ0FLQztBQUNELHVCQUE4QixJQUFlO0lBQ3pDLElBQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxNQUFtQixDQUFDO0lBQzNDLElBQU0sS0FBSyxHQUFHLFNBQVMsQ0FBQyxjQUFnQyxDQUFDO0lBQ3pELEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxFQUFFLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUV2QyxVQUFVLENBQUM7UUFDUCxTQUFTLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQyxDQUFDLHlEQUF5RDtJQUMzRixDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDWixDQUFDO0FBUkQsc0NBUUM7QUFFRCxpQkFBd0IsSUFBZTtJQUNuQyxvRUFBb0U7SUFDcEUsT0FBTyxDQUFDLEdBQUcsQ0FBQyxlQUFlLENBQUMsQ0FBQztBQUNqQyxDQUFDO0FBSEQsMEJBR0M7QUFFRCxnQkFBdUIsSUFBZTtJQUNsQyxrRUFBa0U7SUFDbEUsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQW1CLENBQUM7SUFDM0MsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUM7SUFDN0IsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBTEQsd0JBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcmFtZU1vZHVsZSBmcm9tIFwidWkvZnJhbWVcIjtcclxuaW1wb3J0IHsgTmF2aWdhdGVkRGF0YSwgUGFnZSwgRXZlbnREYXRhIH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gXCJ1aS9jb3JlL3ZpZXdcIjtcclxuaW1wb3J0IHsgT3duZXJWaWV3TW9kZWwgfSBmcm9tIFwiLi9vd25lci12aWV3LW1vZGVsXCI7XHJcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gXCJ1aS90ZXh0LWZpZWxkXCI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbmF2aWdhdGluZ1RvKGFyZ3M6IE5hdmlnYXRlZERhdGEpIHtcclxuICAgIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdCBhcyBQYWdlO1xyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBPd25lclZpZXdNb2RlbCgpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYmFja1RhcChhcmdzOiBOYXZpZ2F0ZWREYXRhKSB7XHJcbiAgICBjb25zdCBidXR0b24gPSBhcmdzLm9iamVjdCBhcyBWaWV3O1xyXG4gICAgY29uc3QgcGFnZSA9IGJ1dHRvbi5wYWdlIGFzIFBhZ2U7XHJcblxyXG4gICAgZnJhbWVNb2R1bGUudG9wbW9zdCgpLm5hdmlnYXRlKHtcclxuICAgICAgICBtb2R1bGVOYW1lOiBcInBhZ2VzL21haW4vbWFpbi1wYWdlXCIsXHJcbiAgICAgICAgdHJhbnNpdGlvbjogeyBuYW1lOiBcImZsaXBcIiB9LFxyXG4gICAgICAgIGNvbnRleHQ6IHtcclxuICAgICAgICAgICAgb3duZXJOYW1lOiBwYWdlLmJpbmRpbmdDb250ZXh0Lm93bmVyTmFtZSxcclxuICAgICAgICB9LFxyXG4gICAgfSk7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmlyc3RUZkxvYWRlZChhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIGNvbnN0IGZpcnN0VGV4dGZpZWxkID0gYXJncy5vYmplY3QgYXMgVGV4dEZpZWxkO1xyXG4gICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgZmlyc3RUZXh0ZmllbGQuZm9jdXMoKTsgLy8gU2hvd3MgdGhlIHNvZnQgaW5wdXQgbWV0aG9kLCB1c3VzYWxseSBhIHNvZnQga2V5Ym9hcmQuXHJcbiAgICB9LCAxMDApO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBvblJldHVyblByZXNzKGFyZ3M6IEV2ZW50RGF0YSkge1xyXG4gICAgY29uc3QgdGV4dEZpZWxkID0gYXJncy5vYmplY3QgYXMgVGV4dEZpZWxkO1xyXG4gICAgY29uc3QgbW9kZWwgPSB0ZXh0RmllbGQuYmluZGluZ0NvbnRleHQgYXMgT3duZXJWaWV3TW9kZWw7XHJcbiAgICBtb2RlbC5zZXQoXCJvd25lck5hbWVcIiwgdGV4dEZpZWxkLnRleHQpO1xyXG5cclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRleHRGaWVsZC5kaXNtaXNzU29mdElucHV0KCk7IC8vIEhpZGVzIHRoZSBzb2Z0IGlucHV0IG1ldGhvZCwgdXN1c2FsbHkgYSBzb2Z0IGtleWJvYXJkLlxyXG4gICAgfSwgMTAwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRm9jdXMoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICAvLyBmb2N1cyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VycyBlbnRlcnMgdGhlIFRleHRGaWVsZFxyXG4gICAgY29uc29sZS5sb2coXCJvbkZvY3VzIGV2ZW50XCIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gb25CbHVyKGFyZ3M6IEV2ZW50RGF0YSkge1xyXG4gICAgLy8gYmx1ciBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VyIGxlYXZlcyB0aGUgVGV4dEZpZWxkXHJcbiAgICBjb25zdCB0ZXh0RmllbGQgPSBhcmdzLm9iamVjdCBhcyBUZXh0RmllbGQ7XHJcbiAgICB0ZXh0RmllbGQuZGlzbWlzc1NvZnRJbnB1dCgpO1xyXG4gICAgY29uc29sZS5sb2coXCJvbkJsdXIgZXZlbnRcIik7XHJcbn1cclxuIl19