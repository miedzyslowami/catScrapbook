"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var addScrap_view_model_1 = require("./addScrap-view-model");
var closeCallback;
function onShownModally(args) {
    var page = args.object;
    page.bindingContext = new addScrap_view_model_1.AddScrapViewModel();
    closeCallback = args.closeCallback;
}
exports.onShownModally = onShownModally;
function doneTap(args) {
    var view = args.object;
    var model = view.bindingContext;
    closeCallback();
}
exports.doneTap = doneTap;
function firstTfLoaded(args) {
    var firstTextfield = args.object;
    setTimeout(function () {
        firstTextfield.focus(); // Shows the soft input method, ususally a soft keyboard.
    }, 100);
}
exports.firstTfLoaded = firstTfLoaded;
function onReturnPress(args) {
    var textField = args.object;
    var model = textField.bindingContext;
    setTimeout(function () {
        textField.dismissSoftInput(); // Hides the soft input method, ususally a soft keyboard.
    }, 100);
}
exports.onReturnPress = onReturnPress;
function onFocus(args) {
    // focus event will be triggered when the users enters the input
    var textView = args.object;
    console.log(textView.page);
    // const page = args.object as TextField;
    // const model = textField.bindingContext as AddScrapViewModel;
    // model.set('backButtonVisibility','collapse');
    // console.log("onFocus event", model.backButtonVisibility);
}
exports.onFocus = onFocus;
function onFocusTextView(args) {
    var textView = args.object;
    var page = args.object;
    var model = page.bindingContext;
    model.set('backButtonVisibility', 'collapse');
    // textField.dismissSoftInput();
    console.log("onBlur event");
}
exports.onFocusTextView = onFocusTextView;
function onBlurTextField(args) {
}
exports.onBlurTextField = onBlurTextField;
function onBlurTextView(args) {
    // blur event will be triggered when the user leaves the TextField
    var textView = args.object;
    var page = args.object;
    var model = page.bindingContext;
    model.set('backButtonVisibility', 'visible');
    // textField.dismissSoftInput();
    console.log("onBlur event");
}
exports.onBlurTextView = onBlurTextView;
function setScrapDate(args) {
    var datePicker = args.object;
    console.log(datePicker);
}
exports.setScrapDate = setScrapDate;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkU2NyYXAtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFkZFNjcmFwLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSw2REFBMEQ7QUFNMUQsSUFBSSxhQUF1QixDQUFDO0FBRTVCLHdCQUErQixJQUFzQjtJQUNqRCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBYyxDQUFDO0lBQ2pDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSx1Q0FBaUIsRUFBRSxDQUFDO0lBQzlDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQ3ZDLENBQUM7QUFKRCx3Q0FJQztBQUVELGlCQUF3QixJQUFlO0lBQ25DLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFjLENBQUM7SUFDakMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUNsQyxhQUFhLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBSkQsMEJBSUM7QUFFRCx1QkFBOEIsSUFBZTtJQUN6QyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBbUIsQ0FBQztJQUNoRCxVQUFVLENBQUM7UUFDUCxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyx5REFBeUQ7SUFDckYsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osQ0FBQztBQUxELHNDQUtDO0FBQ0QsdUJBQThCLElBQWU7SUFDekMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQW1CLENBQUM7SUFDM0MsSUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLGNBQW1DLENBQUM7SUFFNUQsVUFBVSxDQUFDO1FBQ1AsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyx5REFBeUQ7SUFDM0YsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osQ0FBQztBQVBELHNDQU9DO0FBRUQsaUJBQXdCLElBQWU7SUFDbkMsZ0VBQWdFO0lBQ2hFLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFrQixDQUFDO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLHlDQUF5QztJQUN6QywrREFBK0Q7SUFFL0QsZ0RBQWdEO0lBRWhELDREQUE0RDtBQUNoRSxDQUFDO0FBVkQsMEJBVUM7QUFDRCx5QkFBZ0MsSUFBZTtJQUMzQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBa0IsQ0FBQztJQUN6QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBYyxDQUFDO0lBQ2pDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFtQyxDQUFDO0lBQ3ZELEtBQUssQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUMsVUFBVSxDQUFDLENBQUM7SUFDN0MsZ0NBQWdDO0lBQ2hDLE9BQU8sQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDLENBQUM7QUFDaEMsQ0FBQztBQVBELDBDQU9DO0FBQ0QseUJBQWdDLElBQWU7QUFFL0MsQ0FBQztBQUZELDBDQUVDO0FBQ0Qsd0JBQStCLElBQWU7SUFDMUMsa0VBQWtFO0lBQ2xFLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFrQixDQUFDO0lBQ3pDLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFjLENBQUM7SUFDakMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQW1DLENBQUM7SUFDdkQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBQyxTQUFTLENBQUMsQ0FBQztJQUM1QyxnQ0FBZ0M7SUFDaEMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxjQUFjLENBQUMsQ0FBQztBQUNoQyxDQUFDO0FBUkQsd0NBUUM7QUFFRCxzQkFBNkIsSUFBZTtJQUN4QyxJQUFNLFVBQVUsR0FBRyxJQUFJLENBQUMsTUFBb0IsQ0FBQztJQUM3QyxPQUFPLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQzVCLENBQUM7QUFIRCxvQ0FHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCAqIGFzIGZyYW1lTW9kdWxlIGZyb20gXCJ1aS9mcmFtZVwiO1xyXG5pbXBvcnQgeyBTaG93bk1vZGFsbHlEYXRhLCBOYXZpZ2F0ZWREYXRhLCBQYWdlLCBFdmVudERhdGEgfSBmcm9tIFwidWkvcGFnZVwiO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcInVpL2NvcmUvdmlld1wiO1xyXG5pbXBvcnQgeyBBZGRTY3JhcFZpZXdNb2RlbCB9IGZyb20gXCIuL2FkZFNjcmFwLXZpZXctbW9kZWxcIjtcclxuaW1wb3J0IHsgVGV4dEZpZWxkIH0gZnJvbSBcInVpL3RleHQtZmllbGRcIjtcclxuaW1wb3J0IHsgVGV4dFZpZXcgIH0gZnJvbSBcInVpL3RleHQtdmlld1wiO1xyXG5pbXBvcnQgeyBEYXRlUGlja2VyIH0gZnJvbSBcInRucy1jb3JlLW1vZHVsZXMvdWkvZGF0ZS1waWNrZXJcIjtcclxuaW1wb3J0ICogYXMgaW1hZ2VwaWNrZXIgZnJvbSBcIm5hdGl2ZXNjcmlwdC1pbWFnZXBpY2tlclwiO1xyXG5cclxubGV0IGNsb3NlQ2FsbGJhY2s6IEZ1bmN0aW9uO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uU2hvd25Nb2RhbGx5KGFyZ3M6IFNob3duTW9kYWxseURhdGEpIHtcclxuICAgIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdCBhcyBQYWdlO1xyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBBZGRTY3JhcFZpZXdNb2RlbCgpO1xyXG4gICAgY2xvc2VDYWxsYmFjayA9IGFyZ3MuY2xvc2VDYWxsYmFjaztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvbmVUYXAoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICBjb25zdCB2aWV3ID0gYXJncy5vYmplY3QgYXMgVmlldztcclxuICAgIGNvbnN0IG1vZGVsID0gdmlldy5iaW5kaW5nQ29udGV4dDtcclxuICAgIGNsb3NlQ2FsbGJhY2soKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0VGZMb2FkZWQoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICBjb25zdCBmaXJzdFRleHRmaWVsZCA9IGFyZ3Mub2JqZWN0IGFzIFRleHRGaWVsZDtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGZpcnN0VGV4dGZpZWxkLmZvY3VzKCk7IC8vIFNob3dzIHRoZSBzb2Z0IGlucHV0IG1ldGhvZCwgdXN1c2FsbHkgYSBzb2Z0IGtleWJvYXJkLlxyXG4gICAgfSwgMTAwKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gb25SZXR1cm5QcmVzcyhhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIGNvbnN0IHRleHRGaWVsZCA9IGFyZ3Mub2JqZWN0IGFzIFRleHRGaWVsZDtcclxuICAgIGNvbnN0IG1vZGVsID0gdGV4dEZpZWxkLmJpbmRpbmdDb250ZXh0IGFzIEFkZFNjcmFwVmlld01vZGVsO1xyXG4gICBcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRleHRGaWVsZC5kaXNtaXNzU29mdElucHV0KCk7IC8vIEhpZGVzIHRoZSBzb2Z0IGlucHV0IG1ldGhvZCwgdXN1c2FsbHkgYSBzb2Z0IGtleWJvYXJkLlxyXG4gICAgfSwgMTAwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRm9jdXMoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICAvLyBmb2N1cyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VycyBlbnRlcnMgdGhlIGlucHV0XHJcbiAgICBjb25zdCB0ZXh0VmlldyA9IGFyZ3Mub2JqZWN0IGFzIFRleHRWaWV3O1xyXG5jb25zb2xlLmxvZyh0ZXh0Vmlldy5wYWdlKTtcclxuICAgIC8vIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdCBhcyBUZXh0RmllbGQ7XHJcbiAgICAvLyBjb25zdCBtb2RlbCA9IHRleHRGaWVsZC5iaW5kaW5nQ29udGV4dCBhcyBBZGRTY3JhcFZpZXdNb2RlbDtcclxuICBcclxuICAgIC8vIG1vZGVsLnNldCgnYmFja0J1dHRvblZpc2liaWxpdHknLCdjb2xsYXBzZScpO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKFwib25Gb2N1cyBldmVudFwiLCBtb2RlbC5iYWNrQnV0dG9uVmlzaWJpbGl0eSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRm9jdXNUZXh0VmlldyhhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIGNvbnN0IHRleHRWaWV3ID0gYXJncy5vYmplY3QgYXMgVGV4dFZpZXc7XHJcbiAgICBjb25zdCBwYWdlID0gYXJncy5vYmplY3QgYXMgUGFnZTtcclxuICAgIGNvbnN0IG1vZGVsID0gcGFnZS5iaW5kaW5nQ29udGV4dCBhcyBBZGRTY3JhcFZpZXdNb2RlbDtcclxuICAgIG1vZGVsLnNldCgnYmFja0J1dHRvblZpc2liaWxpdHknLCdjb2xsYXBzZScpO1xyXG4gICAgLy8gdGV4dEZpZWxkLmRpc21pc3NTb2Z0SW5wdXQoKTtcclxuICAgIGNvbnNvbGUubG9nKFwib25CbHVyIGV2ZW50XCIpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBvbkJsdXJUZXh0RmllbGQoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgIFxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBvbkJsdXJUZXh0VmlldyhhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIC8vIGJsdXIgZXZlbnQgd2lsbCBiZSB0cmlnZ2VyZWQgd2hlbiB0aGUgdXNlciBsZWF2ZXMgdGhlIFRleHRGaWVsZFxyXG4gICAgY29uc3QgdGV4dFZpZXcgPSBhcmdzLm9iamVjdCBhcyBUZXh0VmlldztcclxuICAgIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdCBhcyBQYWdlO1xyXG4gICAgY29uc3QgbW9kZWwgPSBwYWdlLmJpbmRpbmdDb250ZXh0IGFzIEFkZFNjcmFwVmlld01vZGVsO1xyXG4gICAgbW9kZWwuc2V0KCdiYWNrQnV0dG9uVmlzaWJpbGl0eScsJ3Zpc2libGUnKTtcclxuICAgIC8vIHRleHRGaWVsZC5kaXNtaXNzU29mdElucHV0KCk7XHJcbiAgICBjb25zb2xlLmxvZyhcIm9uQmx1ciBldmVudFwiKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNldFNjcmFwRGF0ZShhcmdzOiBFdmVudERhdGEpe1xyXG4gICAgY29uc3QgZGF0ZVBpY2tlciA9IGFyZ3Mub2JqZWN0IGFzIERhdGVQaWNrZXI7XHJcbiAgICBjb25zb2xlLmxvZyhkYXRlUGlja2VyKTtcclxufVxyXG5cclxuIl19