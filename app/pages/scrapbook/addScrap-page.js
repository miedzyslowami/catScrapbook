"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var addScrap_view_model_1 = require("./addScrap-view-model");
var closeCallback;
function onShownModally(args) {
    var page = args.object;
    page.bindingContext = new addScrap_view_model_1.AddScrapViewModel();
    closeCallback = args.closeCallback;
}
exports.onShownModally = onShownModally;
function doneTap(args) {
    var view = args.object;
    var model = view.bindingContext;
    closeCallback();
}
exports.doneTap = doneTap;
function firstTfLoaded(args) {
    var firstTextfield = args.object;
    setTimeout(function () {
        firstTextfield.focus(); // Shows the soft input method, ususally a soft keyboard.
    }, 100);
}
exports.firstTfLoaded = firstTfLoaded;
function onReturnPress(args) {
    var textField = args.object;
    var model = textField.bindingContext;
    setTimeout(function () {
        textField.dismissSoftInput(); // Hides the soft input method, ususally a soft keyboard.
    }, 100);
}
exports.onReturnPress = onReturnPress;
function onFocus(args) {
    // focus event will be triggered when the users enters the input
    var textView = args.object;
    console.log(textView.page);
    // const page = args.object as TextField;
    // const model = textField.bindingContext as AddScrapViewModel;
    // model.set('backButtonVisibility','collapse');
    // console.log("onFocus event", model.backButtonVisibility);
}
exports.onFocus = onFocus;
function onFocusTextView(args) {
    var textView = args.object;
    var page = args.object;
    var model = page.bindingContext;
    model.set('backButtonVisibility', 'collapse');
}
exports.onFocusTextView = onFocusTextView;
function onBlurTitle(args) {
    var textView = args.object;
    var page = args.object;
    var model = page.bindingContext;
    model.set("eventName", textView.text);
}
exports.onBlurTitle = onBlurTitle;
function onBlurNote(args) {
    var textView = args.object;
    var page = args.object;
    var model = page.bindingContext;
    model.set("eventInfo", textView.text);
}
exports.onBlurNote = onBlurNote;
function setScrapDate(args) {
    var datePicker = args.object;
    console.log(datePicker);
}
exports.setScrapDate = setScrapDate;
function submitTap(args) {
    var textView = args.object;
    var page = args.object;
    var model = page.bindingContext;
    closeCallback(model.eventName, model.eventInfo);
}
exports.submitTap = submitTap;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWRkU2NyYXAtcGFnZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImFkZFNjcmFwLXBhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFHQSw2REFBMEQ7QUFNMUQsSUFBSSxhQUF1QixDQUFDO0FBRTVCLHdCQUErQixJQUFzQjtJQUNqRCxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBYyxDQUFDO0lBQ2pDLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSx1Q0FBaUIsRUFBRSxDQUFDO0lBQzlDLGFBQWEsR0FBRyxJQUFJLENBQUMsYUFBYSxDQUFDO0FBQ3ZDLENBQUM7QUFKRCx3Q0FJQztBQUVELGlCQUF3QixJQUFlO0lBQ25DLElBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxNQUFjLENBQUM7SUFDakMsSUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLGNBQWMsQ0FBQztJQUNsQyxhQUFhLEVBQUUsQ0FBQztBQUNwQixDQUFDO0FBSkQsMEJBSUM7QUFFRCx1QkFBOEIsSUFBZTtJQUN6QyxJQUFNLGNBQWMsR0FBRyxJQUFJLENBQUMsTUFBbUIsQ0FBQztJQUNoRCxVQUFVLENBQUM7UUFDUCxjQUFjLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyx5REFBeUQ7SUFDckYsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osQ0FBQztBQUxELHNDQUtDO0FBQ0QsdUJBQThCLElBQWU7SUFDekMsSUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLE1BQW1CLENBQUM7SUFDM0MsSUFBTSxLQUFLLEdBQUcsU0FBUyxDQUFDLGNBQW1DLENBQUM7SUFFNUQsVUFBVSxDQUFDO1FBQ1AsU0FBUyxDQUFDLGdCQUFnQixFQUFFLENBQUMsQ0FBQyx5REFBeUQ7SUFDM0YsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDO0FBQ1osQ0FBQztBQVBELHNDQU9DO0FBRUQsaUJBQXdCLElBQWU7SUFDbkMsZ0VBQWdFO0lBQ2hFLElBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFrQixDQUFDO0lBQzdDLE9BQU8sQ0FBQyxHQUFHLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3ZCLHlDQUF5QztJQUN6QywrREFBK0Q7SUFFL0QsZ0RBQWdEO0lBRWhELDREQUE0RDtBQUNoRSxDQUFDO0FBVkQsMEJBVUM7QUFDRCx5QkFBZ0MsSUFBZTtJQUMzQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBa0IsQ0FBQztJQUN6QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBYyxDQUFDO0lBQ2pDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFtQyxDQUFDO0lBQ3ZELEtBQUssQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUMsVUFBVSxDQUFDLENBQUM7QUFDakQsQ0FBQztBQUxELDBDQUtDO0FBQ0QscUJBQTRCLElBQWU7SUFDdkMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQW1CLENBQUM7SUFDMUMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQWMsQ0FBQztJQUNqQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBbUMsQ0FBQztJQUN2RCxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUxELGtDQUtDO0FBQ0Qsb0JBQTJCLElBQWU7SUFDdEMsSUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQWtCLENBQUM7SUFDekMsSUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLE1BQWMsQ0FBQztJQUNqQyxJQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsY0FBbUMsQ0FBQztJQUN2RCxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUM7QUFDMUMsQ0FBQztBQUxELGdDQUtDO0FBRUQsc0JBQTZCLElBQWU7SUFDeEMsSUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQW9CLENBQUM7SUFDN0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUM1QixDQUFDO0FBSEQsb0NBR0M7QUFFRCxtQkFBMEIsSUFBZTtJQUNyQyxJQUFNLFFBQVEsR0FBRyxJQUFJLENBQUMsTUFBa0IsQ0FBQztJQUN6QyxJQUFNLElBQUksR0FBRyxJQUFJLENBQUMsTUFBYyxDQUFDO0lBQ2pDLElBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxjQUFtQyxDQUFDO0lBQ3ZELGFBQWEsQ0FBQyxLQUFLLENBQUMsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztBQUNwRCxDQUFDO0FBTEQsOEJBS0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyBmcmFtZU1vZHVsZSBmcm9tIFwidWkvZnJhbWVcIjtcclxuaW1wb3J0IHsgU2hvd25Nb2RhbGx5RGF0YSwgTmF2aWdhdGVkRGF0YSwgUGFnZSwgRXZlbnREYXRhIH0gZnJvbSBcInVpL3BhZ2VcIjtcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gXCJ1aS9jb3JlL3ZpZXdcIjtcclxuaW1wb3J0IHsgQWRkU2NyYXBWaWV3TW9kZWwgfSBmcm9tIFwiLi9hZGRTY3JhcC12aWV3LW1vZGVsXCI7XHJcbmltcG9ydCB7IFRleHRGaWVsZCB9IGZyb20gXCJ1aS90ZXh0LWZpZWxkXCI7XHJcbmltcG9ydCB7IFRleHRWaWV3ICB9IGZyb20gXCJ1aS90ZXh0LXZpZXdcIjtcclxuaW1wb3J0IHsgRGF0ZVBpY2tlciB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3VpL2RhdGUtcGlja2VyXCI7XHJcblxyXG5cclxubGV0IGNsb3NlQ2FsbGJhY2s6IEZ1bmN0aW9uO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uU2hvd25Nb2RhbGx5KGFyZ3M6IFNob3duTW9kYWxseURhdGEpIHtcclxuICAgIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdCBhcyBQYWdlO1xyXG4gICAgcGFnZS5iaW5kaW5nQ29udGV4dCA9IG5ldyBBZGRTY3JhcFZpZXdNb2RlbCgpO1xyXG4gICAgY2xvc2VDYWxsYmFjayA9IGFyZ3MuY2xvc2VDYWxsYmFjaztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRvbmVUYXAoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICBjb25zdCB2aWV3ID0gYXJncy5vYmplY3QgYXMgVmlldztcclxuICAgIGNvbnN0IG1vZGVsID0gdmlldy5iaW5kaW5nQ29udGV4dDtcclxuICAgIGNsb3NlQ2FsbGJhY2soKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGZpcnN0VGZMb2FkZWQoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICBjb25zdCBmaXJzdFRleHRmaWVsZCA9IGFyZ3Mub2JqZWN0IGFzIFRleHRGaWVsZDtcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIGZpcnN0VGV4dGZpZWxkLmZvY3VzKCk7IC8vIFNob3dzIHRoZSBzb2Z0IGlucHV0IG1ldGhvZCwgdXN1c2FsbHkgYSBzb2Z0IGtleWJvYXJkLlxyXG4gICAgfSwgMTAwKTtcclxufVxyXG5leHBvcnQgZnVuY3Rpb24gb25SZXR1cm5QcmVzcyhhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIGNvbnN0IHRleHRGaWVsZCA9IGFyZ3Mub2JqZWN0IGFzIFRleHRGaWVsZDtcclxuICAgIGNvbnN0IG1vZGVsID0gdGV4dEZpZWxkLmJpbmRpbmdDb250ZXh0IGFzIEFkZFNjcmFwVmlld01vZGVsO1xyXG4gICBcclxuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgIHRleHRGaWVsZC5kaXNtaXNzU29mdElucHV0KCk7IC8vIEhpZGVzIHRoZSBzb2Z0IGlucHV0IG1ldGhvZCwgdXN1c2FsbHkgYSBzb2Z0IGtleWJvYXJkLlxyXG4gICAgfSwgMTAwKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRm9jdXMoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICAvLyBmb2N1cyBldmVudCB3aWxsIGJlIHRyaWdnZXJlZCB3aGVuIHRoZSB1c2VycyBlbnRlcnMgdGhlIGlucHV0XHJcbiAgICBjb25zdCB0ZXh0VmlldyA9IGFyZ3Mub2JqZWN0IGFzIFRleHRWaWV3O1xyXG5jb25zb2xlLmxvZyh0ZXh0Vmlldy5wYWdlKTtcclxuICAgIC8vIGNvbnN0IHBhZ2UgPSBhcmdzLm9iamVjdCBhcyBUZXh0RmllbGQ7XHJcbiAgICAvLyBjb25zdCBtb2RlbCA9IHRleHRGaWVsZC5iaW5kaW5nQ29udGV4dCBhcyBBZGRTY3JhcFZpZXdNb2RlbDtcclxuICBcclxuICAgIC8vIG1vZGVsLnNldCgnYmFja0J1dHRvblZpc2liaWxpdHknLCdjb2xsYXBzZScpO1xyXG5cclxuICAgIC8vIGNvbnNvbGUubG9nKFwib25Gb2N1cyBldmVudFwiLCBtb2RlbC5iYWNrQnV0dG9uVmlzaWJpbGl0eSk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG9uRm9jdXNUZXh0VmlldyhhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIGNvbnN0IHRleHRWaWV3ID0gYXJncy5vYmplY3QgYXMgVGV4dFZpZXc7XHJcbiAgICBjb25zdCBwYWdlID0gYXJncy5vYmplY3QgYXMgUGFnZTtcclxuICAgIGNvbnN0IG1vZGVsID0gcGFnZS5iaW5kaW5nQ29udGV4dCBhcyBBZGRTY3JhcFZpZXdNb2RlbDtcclxuICAgIG1vZGVsLnNldCgnYmFja0J1dHRvblZpc2liaWxpdHknLCdjb2xsYXBzZScpO1xyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBvbkJsdXJUaXRsZShhcmdzOiBFdmVudERhdGEpIHtcclxuICAgIGNvbnN0IHRleHRWaWV3ID0gYXJncy5vYmplY3QgYXMgVGV4dEZpZWxkO1xyXG4gICAgY29uc3QgcGFnZSA9IGFyZ3Mub2JqZWN0IGFzIFBhZ2U7XHJcbiAgICBjb25zdCBtb2RlbCA9IHBhZ2UuYmluZGluZ0NvbnRleHQgYXMgQWRkU2NyYXBWaWV3TW9kZWw7XHJcbiAgICBtb2RlbC5zZXQoXCJldmVudE5hbWVcIiwgdGV4dFZpZXcudGV4dCk7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIG9uQmx1ck5vdGUoYXJnczogRXZlbnREYXRhKSB7XHJcbiAgICBjb25zdCB0ZXh0VmlldyA9IGFyZ3Mub2JqZWN0IGFzIFRleHRWaWV3O1xyXG4gICAgY29uc3QgcGFnZSA9IGFyZ3Mub2JqZWN0IGFzIFBhZ2U7XHJcbiAgICBjb25zdCBtb2RlbCA9IHBhZ2UuYmluZGluZ0NvbnRleHQgYXMgQWRkU2NyYXBWaWV3TW9kZWw7XHJcbiAgICBtb2RlbC5zZXQoXCJldmVudEluZm9cIiwgdGV4dFZpZXcudGV4dCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzZXRTY3JhcERhdGUoYXJnczogRXZlbnREYXRhKXtcclxuICAgIGNvbnN0IGRhdGVQaWNrZXIgPSBhcmdzLm9iamVjdCBhcyBEYXRlUGlja2VyO1xyXG4gICAgY29uc29sZS5sb2coZGF0ZVBpY2tlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBzdWJtaXRUYXAoYXJnczogRXZlbnREYXRhKXtcclxuICAgIGNvbnN0IHRleHRWaWV3ID0gYXJncy5vYmplY3QgYXMgVGV4dFZpZXc7XHJcbiAgICBjb25zdCBwYWdlID0gYXJncy5vYmplY3QgYXMgUGFnZTtcclxuICAgIGNvbnN0IG1vZGVsID0gcGFnZS5iaW5kaW5nQ29udGV4dCBhcyBBZGRTY3JhcFZpZXdNb2RlbDtcclxuICAgIGNsb3NlQ2FsbGJhY2sobW9kZWwuZXZlbnROYW1lLCBtb2RlbC5ldmVudEluZm8pO1xyXG59XHJcblxyXG4iXX0=